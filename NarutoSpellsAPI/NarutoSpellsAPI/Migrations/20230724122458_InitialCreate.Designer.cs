// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NarutoCharactersAPI.Data;

#nullable disable

namespace NarutoCharactersAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230724122458_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NarutoCharactersAPI.Models.Affiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Affiliation");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AffiliationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AffiliationId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviewser");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.SpellCharacter", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("SpellId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("SpellCharacters");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.SpellType", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("SpellId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("SpellTypes");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Character", b =>
                {
                    b.HasOne("NarutoCharactersAPI.Models.Affiliation", "Affiliation")
                        .WithMany("Characters")
                        .HasForeignKey("AffiliationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliation");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Review", b =>
                {
                    b.HasOne("NarutoCharactersAPI.Models.Character", "Character")
                        .WithMany("Reviews")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NarutoCharactersAPI.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.SpellCharacter", b =>
                {
                    b.HasOne("NarutoCharactersAPI.Models.Character", "Character")
                        .WithMany("SpellCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NarutoCharactersAPI.Models.Spell", "Spell")
                        .WithMany("SpellCharacters")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.SpellType", b =>
                {
                    b.HasOne("NarutoCharactersAPI.Models.Spell", "Spell")
                        .WithMany("SpellTypes")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NarutoCharactersAPI.Models.Type", "Type")
                        .WithMany("SpellTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spell");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Affiliation", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Character", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("SpellCharacters");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Spell", b =>
                {
                    b.Navigation("SpellCharacters");

                    b.Navigation("SpellTypes");
                });

            modelBuilder.Entity("NarutoCharactersAPI.Models.Type", b =>
                {
                    b.Navigation("SpellTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
